#include<stdio.h>
#include<stdlib.h>
#include<strings.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<arpa/inet.h>
#include<unistd.h>
#include<netdb.h>
#include<string.h>
#include<iostream>
#include "./include/common/mavlink.h"

/* This code creates a bridge between Qgroundcontrol and Flightgear and sends 
data from FG to QGC to display the telemetric properties of the vehicle on the
Ground Control station.

Author: rakshit dayal

*/

#define host_address "127.0.0.1"
#define BUF_LEN	1024

inline float vector_length(float x, float y, float z, float k){
	return sqrt(x*k*k*x + y*y*k*k + z*z*k*k);
}

//========================== ERROR ================================================//
void error(const char* msg){
	printf("Error: %s\n",msg);
	printf("exiting with error");
	exit(-1);
	}


using namespace std;
int main(int argc, char* argv[]){
	// arg1 = IPofqgc computer
	// arg2 = port on which qgc is listening
	// arg3 = vehicle ID
	// arg4 = fgconnecting port
	
	if(argc != 5){
		printf("Insufficient number of input arguments\n");
		exit(-1);
	} 
	
	///////////////////// create a link between this code and QGC///////////////////////////

	// create UDP socket
	/////////////////////////////////////////////////////////////////////////////////////////
	struct sockaddr_in addr_me_send;
	int socket_send;
	uint16_t port_send;
	std::string IP_send_to = "127.0.0.1"; // <-- IP which QGroundStation is listening on for UDP packets //argv[1]
	port_send = 15555; // <-- port which QGroundStation is listening on for UDP packets//atoi(argv[2])

	socklen_t addr_size_send;

	/*Create UDP socket*/
	socket_send = socket(PF_INET, SOCK_DGRAM, 0);

	/*Configure settings in address struct*///
	addr_me_send.sin_family = AF_INET;
	
	addr_me_send.sin_port = htons(port_send);
	addr_me_send.sin_addr.s_addr = inet_addr(IP_send_to.c_str());
	memset(addr_me_send.sin_zero, '0', sizeof addr_me_send.sin_zero);

	/*Initialize size variable to be used later on*/
	addr_size_send = sizeof addr_me_send;

	// record time of app launch

	// buffers and message DSs for
	uint16_t heartbeat_message_len, gnss_message_len, hud_message_len, att_message_len;
	mavlink_message_t heartbeat_message, gnss_message, hud_message, att_message;
	uint8_t heartbeat_message_buf[MAVLINK_MAX_PACKET_LEN];
	uint8_t gnss_message_buf[MAVLINK_MAX_PACKET_LEN];
	uint8_t hud_message_buf[MAVLINK_MAX_PACKET_LEN];
	uint8_t att_message_buf[MAVLINK_MAX_PACKET_LEN];

	uint8_t vehicle_id = atoi(argv[3]);   // <-- this needs a unique number for each aircraft // 255 chars

	/////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////  connection between this code and FlightGear  //////////////////////
	int BindResult;
	int port_in, sock_in, bytes_read;
	float mavdata[100];
	socklen_t addr_len;
	char recv_data[BUF_LEN];
	struct sockaddr_in server_addr_in,client_addr_in;
	//char* host_address;

	port_in = atoi(argv[4]); 
	sock_in = socket(AF_INET, SOCK_DGRAM, 0);
	if (sock_in < 0){
		error("FG link socket creation failed");	
	}else{
	 printf("FG link created Successfully\n");
	}

	//bind
	server_addr_in.sin_family = AF_INET;
	server_addr_in.sin_port = htons(port_in);
	server_addr_in.sin_addr.s_addr = inet_addr(host_address);
	BindResult = bind(sock_in,(struct sockaddr *)&server_addr_in,sizeof(struct sockaddr));
	
	if(BindResult != 0){
		error("bind failed....no data will be received");
	}else{
	 printf("Bind Successful\n");
	}

	do
	{
	bytes_read = recvfrom(sock_in,recv_data,BUF_LEN,0,(struct sockaddr *)&client_addr_in, &addr_len);
	recv_data[bytes_read] = '\0'; 
	/*printf("Xpos:%f\tYpos:%f\tZpos:%f\nXvel:%f\tYvel:%f\tZvel:%f\nRoll:%f\tPitch:%f\tYaw:%f\nRollrate:%f\tPitchrate:%f\t"
	"Yawrate%f\n%f %f %f %f\n",
	mavdata[0], mavdata[1], mavdata[2], // 0:Xpos,1:Ypos,2:Zpos
	 mavdata[3], mavdata[4], mavdata[5], // 3:Xvel,4:Yvel,5:Zvel
	  mavdata[6], mavdata[7], mavdata[8], // 6:Roll,7:Pitch,8:Yaw
	  mavdata[9], mavdata[10], mavdata[11], // 9:Roll rate,10:Pitch rate,11:Yaw rate
	  mavdata[12]);*/

	sscanf(recv_data, "%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f\n",
	  &mavdata[0], &mavdata[1], &mavdata[2], // 0:Xpos,1:Ypos,2:Zpos
	  &mavdata[3], &mavdata[4], &mavdata[5], // 3:Xvel,4:Yvel,5:Zvel
	  &mavdata[6], &mavdata[7], &mavdata[8], // 6:Roll,7:Pitch,8:Yaw
	  &mavdata[9], &mavdata[10], &mavdata[11], // 9:Roll rate,10:Pitch rate,11:Yaw rate
	  &mavdata[12]); 


	//******************************************* SEND TO MAVLINK BEGINS ***********************************************
	// Pack heartbeat message
	mavlink_msg_heartbeat_pack(vehicle_id, MAV_COMP_ID_IMU, &heartbeat_message, MAV_TYPE_FIXED_WING, MAV_AUTOPILOT_GENERIC, MAV_MODE_PREFLIGHT, 0,
					MAV_STATE_STANDBY);
	heartbeat_message_len = mavlink_msg_to_send_buffer(heartbeat_message_buf, &heartbeat_message);

	// send heart beat message through MAV Link
	if (sendto(socket_send, heartbeat_message_buf, heartbeat_message_len, 0, (struct sockaddr *) &addr_me_send, addr_size_send)) {
		//printf("send heart beat\n");
	} else {
		printf("failed to send to the port %s %d\n", IP_send_to.c_str(), (int) port_send);
	}


	// generate position message -- height needs to be in meters
	mavlink_msg_global_position_int_pack(vehicle_id, MAV_COMP_ID_IMU, &gnss_message, 0, mavdata[1] * 1E7, mavdata[0] * 1E7, mavdata[2] * 1000,  mavdata[2]*1000, mavdata[3] * 100, mavdata[4] * 100, -mavdata[5] * 100, (uint16_t)mavdata[8]*100);
// mavdata[8] * 100
	gnss_message_len = mavlink_msg_to_send_buffer(gnss_message_buf, &gnss_message);

	// send out position message
	if (sendto(socket_send, gnss_message_buf, gnss_message_len, 0, (struct sockaddr *) &addr_me_send, addr_size_send)) {
		//printf("send gnss\n");
	} else {
		printf("failed to send to the port %s %d\n", IP_send_to.c_str(), (int) port_send);
	}


	// generate HUD message -- height needs to be in meters
	mavlink_msg_vfr_hud_pack(vehicle_id, MAV_COMP_ID_IMU, &hud_message, 
 1*vector_length(mavdata[3], mavdata[4], mavdata[5], 1), 1*vector_length(mavdata[3], mavdata[4], 0, 1), (int16_t)mavdata[8], 0, 0, -mavdata[5]*0.514444444);
	hud_message_len = mavlink_msg_to_send_buffer(hud_message_buf, &hud_message);

	// send out HUD message
	if (sendto(socket_send, hud_message_buf, hud_message_len, 0, (struct sockaddr *) &addr_me_send, addr_size_send)) {
		//printf("send hud\n");
	} else {
		printf("failed to send to the port %s %d\n", IP_send_to.c_str(), (int) port_send);
	}
	


	// generate Attitude message 
	mavlink_msg_attitude_pack(vehicle_id, MAV_COMP_ID_IMU, &att_message, 0,mavdata[6], mavdata[7], mavdata[8]*3.14159265/180, mavdata[9], mavdata[10], mavdata[11]);
	att_message_len = mavlink_msg_to_send_buffer(att_message_buf, &att_message);

	// send out Attitude message
	if (sendto(socket_send, att_message_buf, att_message_len, 0, (struct sockaddr *) &addr_me_send, addr_size_send)) {
		//printf("send ATT\n");
	} else {
		printf("failed to send to the port %s %d\n", IP_send_to.c_str(), (int) port_send);
	}



	//******************************************* SEND TO MAVLINK ENDS ***********************************************



	}while(1);
}


