# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mage/navigation_dataRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class navigation_dataRequest(genpy.Message):
  _md5sum = "4afd4d727429f048b2c2838440790f14"
  _type = "mage/navigation_dataRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32[] P

"""
  __slots__ = ['P']
  _slot_types = ['float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       P

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(navigation_dataRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.P is None:
        self.P = []
    else:
      self.P = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.P)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.P))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.P = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.P)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.P.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.P = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mage/navigation_dataResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class navigation_dataResponse(genpy.Message):
  _md5sum = "774911f6abf9912532bc825396132fdf"
  _type = "mage/navigation_dataResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 Ps_x
float32 Ps_y
float32 Ps_z
float32 Ps_course
float32 Pe_x
float32 Pe_y
float32 Pe_z
float32 Pe_course


"""
  __slots__ = ['Ps_x','Ps_y','Ps_z','Ps_course','Pe_x','Pe_y','Pe_z','Pe_course']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Ps_x,Ps_y,Ps_z,Ps_course,Pe_x,Pe_y,Pe_z,Pe_course

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(navigation_dataResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Ps_x is None:
        self.Ps_x = 0.
      if self.Ps_y is None:
        self.Ps_y = 0.
      if self.Ps_z is None:
        self.Ps_z = 0.
      if self.Ps_course is None:
        self.Ps_course = 0.
      if self.Pe_x is None:
        self.Pe_x = 0.
      if self.Pe_y is None:
        self.Pe_y = 0.
      if self.Pe_z is None:
        self.Pe_z = 0.
      if self.Pe_course is None:
        self.Pe_course = 0.
    else:
      self.Ps_x = 0.
      self.Ps_y = 0.
      self.Ps_z = 0.
      self.Ps_course = 0.
      self.Pe_x = 0.
      self.Pe_y = 0.
      self.Pe_z = 0.
      self.Pe_course = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_8f.pack(_x.Ps_x, _x.Ps_y, _x.Ps_z, _x.Ps_course, _x.Pe_x, _x.Pe_y, _x.Pe_z, _x.Pe_course))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.Ps_x, _x.Ps_y, _x.Ps_z, _x.Ps_course, _x.Pe_x, _x.Pe_y, _x.Pe_z, _x.Pe_course,) = _struct_8f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_8f.pack(_x.Ps_x, _x.Ps_y, _x.Ps_z, _x.Ps_course, _x.Pe_x, _x.Pe_y, _x.Pe_z, _x.Pe_course))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.Ps_x, _x.Ps_y, _x.Ps_z, _x.Ps_course, _x.Pe_x, _x.Pe_y, _x.Pe_z, _x.Pe_course,) = _struct_8f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8f = struct.Struct("<8f")
class navigation_data(object):
  _type          = 'mage/navigation_data'
  _md5sum = 'ed4b37e8ae38706e3abd169327717ac6'
  _request_class  = navigation_dataRequest
  _response_class = navigation_dataResponse
