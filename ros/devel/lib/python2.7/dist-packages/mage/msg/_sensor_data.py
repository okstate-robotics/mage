# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mage/sensor_data.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class sensor_data(genpy.Message):
  _md5sum = "5999cd5c6051017a1f8758e8353533e7"
  _type = "mage/sensor_data"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 Pos_n
float32 Pos_e
float32 Pos_d
float32 V_n_ms
float32 V_e_ms
float32 V_d_ms
float32 u
float32 v
float32 w
float32 roll_deg
float32 pitch_deg
float32 yaw_deg
float32 p_body
float32 q_body
float32 r_body
float32 V_airspeed
float32 course
float32 lat_deg
float32 long_deg
float32 alt_m
float32 ki_x
float32 ki_y
float32 ki_z


"""
  __slots__ = ['Pos_n','Pos_e','Pos_d','V_n_ms','V_e_ms','V_d_ms','u','v','w','roll_deg','pitch_deg','yaw_deg','p_body','q_body','r_body','V_airspeed','course','lat_deg','long_deg','alt_m','ki_x','ki_y','ki_z']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Pos_n,Pos_e,Pos_d,V_n_ms,V_e_ms,V_d_ms,u,v,w,roll_deg,pitch_deg,yaw_deg,p_body,q_body,r_body,V_airspeed,course,lat_deg,long_deg,alt_m,ki_x,ki_y,ki_z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(sensor_data, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Pos_n is None:
        self.Pos_n = 0.
      if self.Pos_e is None:
        self.Pos_e = 0.
      if self.Pos_d is None:
        self.Pos_d = 0.
      if self.V_n_ms is None:
        self.V_n_ms = 0.
      if self.V_e_ms is None:
        self.V_e_ms = 0.
      if self.V_d_ms is None:
        self.V_d_ms = 0.
      if self.u is None:
        self.u = 0.
      if self.v is None:
        self.v = 0.
      if self.w is None:
        self.w = 0.
      if self.roll_deg is None:
        self.roll_deg = 0.
      if self.pitch_deg is None:
        self.pitch_deg = 0.
      if self.yaw_deg is None:
        self.yaw_deg = 0.
      if self.p_body is None:
        self.p_body = 0.
      if self.q_body is None:
        self.q_body = 0.
      if self.r_body is None:
        self.r_body = 0.
      if self.V_airspeed is None:
        self.V_airspeed = 0.
      if self.course is None:
        self.course = 0.
      if self.lat_deg is None:
        self.lat_deg = 0.
      if self.long_deg is None:
        self.long_deg = 0.
      if self.alt_m is None:
        self.alt_m = 0.
      if self.ki_x is None:
        self.ki_x = 0.
      if self.ki_y is None:
        self.ki_y = 0.
      if self.ki_z is None:
        self.ki_z = 0.
    else:
      self.Pos_n = 0.
      self.Pos_e = 0.
      self.Pos_d = 0.
      self.V_n_ms = 0.
      self.V_e_ms = 0.
      self.V_d_ms = 0.
      self.u = 0.
      self.v = 0.
      self.w = 0.
      self.roll_deg = 0.
      self.pitch_deg = 0.
      self.yaw_deg = 0.
      self.p_body = 0.
      self.q_body = 0.
      self.r_body = 0.
      self.V_airspeed = 0.
      self.course = 0.
      self.lat_deg = 0.
      self.long_deg = 0.
      self.alt_m = 0.
      self.ki_x = 0.
      self.ki_y = 0.
      self.ki_z = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_23f.pack(_x.Pos_n, _x.Pos_e, _x.Pos_d, _x.V_n_ms, _x.V_e_ms, _x.V_d_ms, _x.u, _x.v, _x.w, _x.roll_deg, _x.pitch_deg, _x.yaw_deg, _x.p_body, _x.q_body, _x.r_body, _x.V_airspeed, _x.course, _x.lat_deg, _x.long_deg, _x.alt_m, _x.ki_x, _x.ki_y, _x.ki_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 92
      (_x.Pos_n, _x.Pos_e, _x.Pos_d, _x.V_n_ms, _x.V_e_ms, _x.V_d_ms, _x.u, _x.v, _x.w, _x.roll_deg, _x.pitch_deg, _x.yaw_deg, _x.p_body, _x.q_body, _x.r_body, _x.V_airspeed, _x.course, _x.lat_deg, _x.long_deg, _x.alt_m, _x.ki_x, _x.ki_y, _x.ki_z,) = _struct_23f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_23f.pack(_x.Pos_n, _x.Pos_e, _x.Pos_d, _x.V_n_ms, _x.V_e_ms, _x.V_d_ms, _x.u, _x.v, _x.w, _x.roll_deg, _x.pitch_deg, _x.yaw_deg, _x.p_body, _x.q_body, _x.r_body, _x.V_airspeed, _x.course, _x.lat_deg, _x.long_deg, _x.alt_m, _x.ki_x, _x.ki_y, _x.ki_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 92
      (_x.Pos_n, _x.Pos_e, _x.Pos_d, _x.V_n_ms, _x.V_e_ms, _x.V_d_ms, _x.u, _x.v, _x.w, _x.roll_deg, _x.pitch_deg, _x.yaw_deg, _x.p_body, _x.q_body, _x.r_body, _x.V_airspeed, _x.course, _x.lat_deg, _x.long_deg, _x.alt_m, _x.ki_x, _x.ki_y, _x.ki_z,) = _struct_23f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_23f = struct.Struct("<23f")
