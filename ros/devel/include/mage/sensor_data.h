// Generated by gencpp from file mage/sensor_data.msg
// DO NOT EDIT!


#ifndef MAGE_MESSAGE_SENSOR_DATA_H
#define MAGE_MESSAGE_SENSOR_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mage
{
template <class ContainerAllocator>
struct sensor_data_
{
  typedef sensor_data_<ContainerAllocator> Type;

  sensor_data_()
    : Pos_n(0.0)
    , Pos_e(0.0)
    , Pos_d(0.0)
    , V_n_ms(0.0)
    , V_e_ms(0.0)
    , V_d_ms(0.0)
    , u(0.0)
    , v(0.0)
    , w(0.0)
    , roll_deg(0.0)
    , pitch_deg(0.0)
    , yaw_deg(0.0)
    , p_body(0.0)
    , q_body(0.0)
    , r_body(0.0)
    , V_airspeed(0.0)
    , course(0.0)
    , lat_deg(0.0)
    , long_deg(0.0)
    , alt_m(0.0)
    , ki_x(0.0)
    , ki_y(0.0)
    , ki_z(0.0)  {
    }
  sensor_data_(const ContainerAllocator& _alloc)
    : Pos_n(0.0)
    , Pos_e(0.0)
    , Pos_d(0.0)
    , V_n_ms(0.0)
    , V_e_ms(0.0)
    , V_d_ms(0.0)
    , u(0.0)
    , v(0.0)
    , w(0.0)
    , roll_deg(0.0)
    , pitch_deg(0.0)
    , yaw_deg(0.0)
    , p_body(0.0)
    , q_body(0.0)
    , r_body(0.0)
    , V_airspeed(0.0)
    , course(0.0)
    , lat_deg(0.0)
    , long_deg(0.0)
    , alt_m(0.0)
    , ki_x(0.0)
    , ki_y(0.0)
    , ki_z(0.0)  {
    }



   typedef float _Pos_n_type;
  _Pos_n_type Pos_n;

   typedef float _Pos_e_type;
  _Pos_e_type Pos_e;

   typedef float _Pos_d_type;
  _Pos_d_type Pos_d;

   typedef float _V_n_ms_type;
  _V_n_ms_type V_n_ms;

   typedef float _V_e_ms_type;
  _V_e_ms_type V_e_ms;

   typedef float _V_d_ms_type;
  _V_d_ms_type V_d_ms;

   typedef float _u_type;
  _u_type u;

   typedef float _v_type;
  _v_type v;

   typedef float _w_type;
  _w_type w;

   typedef float _roll_deg_type;
  _roll_deg_type roll_deg;

   typedef float _pitch_deg_type;
  _pitch_deg_type pitch_deg;

   typedef float _yaw_deg_type;
  _yaw_deg_type yaw_deg;

   typedef float _p_body_type;
  _p_body_type p_body;

   typedef float _q_body_type;
  _q_body_type q_body;

   typedef float _r_body_type;
  _r_body_type r_body;

   typedef float _V_airspeed_type;
  _V_airspeed_type V_airspeed;

   typedef float _course_type;
  _course_type course;

   typedef float _lat_deg_type;
  _lat_deg_type lat_deg;

   typedef float _long_deg_type;
  _long_deg_type long_deg;

   typedef float _alt_m_type;
  _alt_m_type alt_m;

   typedef float _ki_x_type;
  _ki_x_type ki_x;

   typedef float _ki_y_type;
  _ki_y_type ki_y;

   typedef float _ki_z_type;
  _ki_z_type ki_z;




  typedef boost::shared_ptr< ::mage::sensor_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mage::sensor_data_<ContainerAllocator> const> ConstPtr;

}; // struct sensor_data_

typedef ::mage::sensor_data_<std::allocator<void> > sensor_data;

typedef boost::shared_ptr< ::mage::sensor_data > sensor_dataPtr;
typedef boost::shared_ptr< ::mage::sensor_data const> sensor_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mage::sensor_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mage::sensor_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mage

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'mage': ['/home/daslab-server1/Rakshit/ros/src/mage/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mage::sensor_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mage::sensor_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mage::sensor_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mage::sensor_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mage::sensor_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mage::sensor_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mage::sensor_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5999cd5c6051017a1f8758e8353533e7";
  }

  static const char* value(const ::mage::sensor_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5999cd5c6051017aULL;
  static const uint64_t static_value2 = 0x1f8758e8353533e7ULL;
};

template<class ContainerAllocator>
struct DataType< ::mage::sensor_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mage/sensor_data";
  }

  static const char* value(const ::mage::sensor_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mage::sensor_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 Pos_n\n\
float32 Pos_e\n\
float32 Pos_d\n\
float32 V_n_ms\n\
float32 V_e_ms\n\
float32 V_d_ms\n\
float32 u\n\
float32 v\n\
float32 w\n\
float32 roll_deg\n\
float32 pitch_deg\n\
float32 yaw_deg\n\
float32 p_body\n\
float32 q_body\n\
float32 r_body\n\
float32 V_airspeed\n\
float32 course\n\
float32 lat_deg\n\
float32 long_deg\n\
float32 alt_m\n\
float32 ki_x\n\
float32 ki_y\n\
float32 ki_z\n\
\n\
";
  }

  static const char* value(const ::mage::sensor_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mage::sensor_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Pos_n);
      stream.next(m.Pos_e);
      stream.next(m.Pos_d);
      stream.next(m.V_n_ms);
      stream.next(m.V_e_ms);
      stream.next(m.V_d_ms);
      stream.next(m.u);
      stream.next(m.v);
      stream.next(m.w);
      stream.next(m.roll_deg);
      stream.next(m.pitch_deg);
      stream.next(m.yaw_deg);
      stream.next(m.p_body);
      stream.next(m.q_body);
      stream.next(m.r_body);
      stream.next(m.V_airspeed);
      stream.next(m.course);
      stream.next(m.lat_deg);
      stream.next(m.long_deg);
      stream.next(m.alt_m);
      stream.next(m.ki_x);
      stream.next(m.ki_y);
      stream.next(m.ki_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct sensor_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mage::sensor_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mage::sensor_data_<ContainerAllocator>& v)
  {
    s << indent << "Pos_n: ";
    Printer<float>::stream(s, indent + "  ", v.Pos_n);
    s << indent << "Pos_e: ";
    Printer<float>::stream(s, indent + "  ", v.Pos_e);
    s << indent << "Pos_d: ";
    Printer<float>::stream(s, indent + "  ", v.Pos_d);
    s << indent << "V_n_ms: ";
    Printer<float>::stream(s, indent + "  ", v.V_n_ms);
    s << indent << "V_e_ms: ";
    Printer<float>::stream(s, indent + "  ", v.V_e_ms);
    s << indent << "V_d_ms: ";
    Printer<float>::stream(s, indent + "  ", v.V_d_ms);
    s << indent << "u: ";
    Printer<float>::stream(s, indent + "  ", v.u);
    s << indent << "v: ";
    Printer<float>::stream(s, indent + "  ", v.v);
    s << indent << "w: ";
    Printer<float>::stream(s, indent + "  ", v.w);
    s << indent << "roll_deg: ";
    Printer<float>::stream(s, indent + "  ", v.roll_deg);
    s << indent << "pitch_deg: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_deg);
    s << indent << "yaw_deg: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_deg);
    s << indent << "p_body: ";
    Printer<float>::stream(s, indent + "  ", v.p_body);
    s << indent << "q_body: ";
    Printer<float>::stream(s, indent + "  ", v.q_body);
    s << indent << "r_body: ";
    Printer<float>::stream(s, indent + "  ", v.r_body);
    s << indent << "V_airspeed: ";
    Printer<float>::stream(s, indent + "  ", v.V_airspeed);
    s << indent << "course: ";
    Printer<float>::stream(s, indent + "  ", v.course);
    s << indent << "lat_deg: ";
    Printer<float>::stream(s, indent + "  ", v.lat_deg);
    s << indent << "long_deg: ";
    Printer<float>::stream(s, indent + "  ", v.long_deg);
    s << indent << "alt_m: ";
    Printer<float>::stream(s, indent + "  ", v.alt_m);
    s << indent << "ki_x: ";
    Printer<float>::stream(s, indent + "  ", v.ki_x);
    s << indent << "ki_y: ";
    Printer<float>::stream(s, indent + "  ", v.ki_y);
    s << indent << "ki_z: ";
    Printer<float>::stream(s, indent + "  ", v.ki_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAGE_MESSAGE_SENSOR_DATA_H
